Constructors：
   委托构造函数：
        允许构造函数调用同一类的其他构造函数。这个过程称为委托构造函数（或构造函数链接）。
            eg:1-1

Destructors:
    “this”总是指向被操作的对象

The hidden “this” pointer:



Class code and header files:
    传统上，类定义放在与类同名的头文件中，在类外定义的成员函数放在与类同名的.cpp文件中。

        在头文件中定义类不违反单定义规则吗？
            *当然不会。如果你的头文件有适当的头保护，就不可能在同一个文件中多次包含类定义。
            *类型（包括类）不受单一定义规则的约束，即每个程序只能有一个定义。因此，不存在 #include 类定义到多个代码文件中的问题（如果有，类就没有多大用处）。

        在头文件中定义成员函数不违反单定义规则吗？
            *这取决于。在类定义中定义的成员函数被认为是隐式内联的。
                内联函数不受单一定义规则的每个程序部分单一定义的约束。这意味着在类定义本身中定义普通的成员函数（例如访问函数）没有问题。

            *在类定义之外定义的成员函数被视为普通函数，并且受单一定义规则的每个程序部分一个定义的约束。
                因此，这些函数应该在代码文件中定义，而不是在头文件中。一个例外是模板函数

        那么我应该在头文件和 cpp 文件中定义什么，以及在类定义内部和外部定义什么？
            您可能很想将所有成员函数定义放入类内部的头文件中。虽然这将编译，但这样做有几个缺点：
                *首先，如上所述，这会使您的类定义变得混乱。
                *其次，如果您更改标头中的代码，则需要重新编译包含该标头的每个文件
                    这可能会产生连锁反应，其中一个微小的更改会导致整个程序需要重新编译（这可能很慢）。如果您更改 .cpp 文件中的代码，则只需重新编译该 .cpp 文件！

            那么我应该在头文件和 cpp 文件中定义什么，以及在类定义内部和外部定义什么？
                我们建议如下：
                            *对于仅在一个文件中使用且通常不可重用的类，请直接在使用它们的单个 .cpp 文件中定义它们。
                            *对于在多个文件中使用的类，或用于一般重用的类，请在与该类同名的 .h 文件中定义它们。
                            *普通成员函数（普通构造函数或析构函数、访问函数等）可以在类中定义。
                            *重要的成员函数应在与类同名的 .cpp 文件中定义。

        默认参数：
            成员函数的默认参数应该在类定义（在头文件中）中声明，任何人都可以在其中看到它们#includes header。


