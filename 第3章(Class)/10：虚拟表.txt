概述：
    为了实现虚函数，C++ 使用了一种特殊形式的后期绑定，称为虚表。虚拟表是用于以动态/后期绑定方式解析函数调用的函数查找表。
    虚拟表有时有其他名称，例如“vtable”、“虚拟函数表”、“虚拟方法表”或“调度表”。

        *首先，每个使用虚函数的类（或派生自使用虚函数的类）都有自己的虚表。该表只是编译器在编译时设置的静态数组
            一个虚表包含一个可以被类对象调用的每个虚函数的条目。该表中的每一项都只是一个函数指针，它指向该类可访问的派生最多的函数。

        *其次，编译器还添加了一个隐藏指针，它是基类的成员，我们将其命名为*__vptr。*__vptr在类实例创建时(自动)被设置，以便它指向该类的虚表。
            与*this指针不同，*__vptr是一个实际的指针，它实际上是编译器用来解析自引用的函数形参。
            因此，它使分配的每个类实例都增大了一个指针的大小。这也意味着 *__vptr 被派生类继承，这很重要。

            eg: 10-1
       
注意：
    任何使用虚函数的类都有一个 *__vptr，因此该类的每​​个对象都会大一个指针。虚函数很强大，但它们确实有性能成


