Sequence Containers:
    *序列容器是维护容器中元素顺序的容器类。序列容器的一个定义特征是您可以按位置选择插入元素的位置。
        序列容器最常见的例子是数组：如果你在一个数组中插入四个元素，这些元素将按照你插入它们的确切顺序。

    *数组:
        *C++ 具有三种常用的不同数组类型：std::vector、std::array 和 C 样式数组。

        *Fixed-size arrays:
            固定大小数组（也称为固定长度数组）要求在实例化时已知数组的长度，并且此后不能更改该长度。 C 风格数组和 std::array 都是固定大小的数组。
            eg:
                std::array<int, 6> fibonnaci = { 0, 1, 1, 2, 3, 5 };
                constexpr std::array a1{ 9, 7, 5, 3, 1 }; // The type is deduced to std::array<int, 5> c++17
                  constexpr auto myArray1 { std::to_array<int, 5>({ 9, 7, 5, 3, 1 }) }; //使用 std::to_array 省略数组长度  c++20

        *Dynamic arrays :
            动态数组可以在运行时调整大小。 std::vector 是一个动态数组。

        *Best practice:
            *对于 constexpr 数组使用 std::array，对于非 constexpr 数组使用 std::vector。
            *使用类模板参数推导 (CTAD) 使编译器从 std::array 的初始值设定项中推导 std::array 的类型和长度。
            *需要 C 风格数组类型的函数参数应使用数组语法（例如 int arr[]）而不是指针语法（例如 int *arr）。

        
    *从 C++11 开始，STL 包含 6 个序列容器：std::vector、std::deque、std::array、std::list、std::forward_list 和 std::basic_string
        vector:
            *一个动态数组，能够根据需要增长以包含其元素。vector 类允许通过操作符 [] 随机访问其元素，并且从 vector 末尾插入和删除元素通常很快。

            *Constructing a std::vector of a specific length:
                eg:
                    std::vector<int> data( 10 ); // vector containing 10 int elements, value-initialized to 0
                    std::vector<int> data{ 10 }; //the list constructor to construct a vector of length 1 with value 10.

            *Passing std::vector:
                std::vector 类型的对象可以像任何其他对象一样传递给函数。这意味着如果我们按值传递 std::vector，将会生成一个昂贵的副本。
                    因此，我们通常通过（const）引用传递 std::vector 以避免此类复制。

                eg:
                    #include <iostream>
                    #include <vector>

                    void passByRef(const std::vector<int>& arr) // we must explicitly specify <int> here
                    {
                        std::cout << arr[0] << '\n';
                    }

                    int main()
                    {
                        std::vector primes{ 2, 3, 5, 7, 11 };
                        passByRef(primes);

                        return 0;
                    }
                  

        eg:1-1

        deque:
            deque 类（读作“deck”）是一个双端队列类，实现为一个可以从两端增长的动态数组
                eg:1-2

        *基于范围的 for 循环 (for-each):
            *遍历容器时，优先使用基于范围的 for 循环，而不是常规的 for 循环。
                将类型推导 (auto) 与基于范围的 for 循环结合使用，让编译器推导数组元素的类型。
            
            *避免使用引用进行元素复制
                eg:
                     for (const auto& word : words) // word is now a const reference
                        std::cout << word << ' ';

            *When to use auto vs auto& vs const auto&
                通常我们会使用 auto 来表示复制成本低的类型，当我们想要修改元素时使用 auto& ，使用 const auto& 表示复制成本较高的类型。
                    但对于基于范围的 for 循环，许多开发人员认为最好始终使用 const auto&，因为它更面向未来。

            *基于范围的 for 循环和其他标准容器类型：
                基于范围的 for 循环适用于各种数组类型，包括（non-decayed）C 样式数组、std::array、std::vector、 linked list、tree和maps。

            Best practice:
                对于基于范围的 for 循环，最好将元素类型定义为：
                    .auto:          当您想要修改元素的副本时。
                    .auto&:         当你想修改原来的元素时。
                    .const auto&    当您只需要查看原始元素时。


Associative Containers:
    关联容器是在将输入插入容器时自动对其输入进行排序的容器。
        默认情况下，关联容器使用 操作符 < 比较元素。

        set：
            set是存储唯一元素的容器，不允许重复元素。元素根据它们的值进行排序

        multiset:
            与set相反，允许重复元素的集合

        map:
            map（也称为关联数组）是一个集合，其中每个元素都是一对，称为key/value对。key用于对数据进行排序和索引，并且必须是唯一的。该value是实际数据

        multimap：
            multimap（也称为字典）是允许重复键的映射。现实生活中的字典是多重映射：key是单词，value是单词的含义。
                所有的key都是按升序排列的，你可以通过key查找value。有些key可以有多种含义，这就是为什么字典是multimap而不是map的原因

Container Adapters:
    容器适配器是适用于特定用途的特殊预定义容器。
        关于容器适配器的有趣部分是您可以选择希望它们使用的序列容器。

    stack:
        堆栈是一个容器，其中元素在 LIFO（后进先出）上下文中运行，其中元素从容器末端插入（推送）和移除（弹出）。
            堆栈默认使用 deque 作为其默认序列容器（这看起来很奇怪，因为 vector 看起来更自然），但也可以使用 vector 或 list。

    queue :
        列是一个容器，其中元素在 FIFO（先进先出）上下文中运行，其中元素被插入（推送）到容器的后面并从前面移除（弹出）。队列默认使用双端队列，但也可以使用列表。

     priority queue:
        优先级队列是一种队列类型，其中元素保持排序（通过 operator<）。当元素被推送时，元素在队列中被排序。从前面移除一个元素会返回优先级队列中最高优先级的项