C++ 支持两种不同类型的常量
    *Named constants：命名常量是与标识符关联的常量值。这些有时也称为符号常量，或者有时只是常量
        命名常量有三种方法：
            1：常量变量:
                要声明常量变量，我们将 const 关键字（称为“const 限定符”）放置在对象类型旁边
                const 变量必须在定义时初始化，然后该值不能通过赋值来更改
                    eg:
                        const double gravity { 9.8 };  // preferred use of const before type
                        int const sidesInSquare { 4 }; // "east const" style, okay but not preferred
                        const double gravity; // error: const variables must be initialized

                note：
                    函数种按值传递or返回时最好不要使用 const
                        因为它们是临时副本，无论如何都会被销毁。const 值还会阻碍某些类型的编译器优化（涉及移动语义），从而导致性能降低

            2：带有替换文本的类似对象的宏
                eg:#define MY_NAME "Alex"
            3：枚举常量

    *Literal constants：文字常量是与标识符无关的常量值。


    建议:优先选择常量变量而不是预处理器宏
            1:最大的问题是宏不遵循正常的 C++ 作用域规则。一旦定义了宏，当前文件中所有后续出现的宏名称都将被替换。如果该名称在其他地方使用，您将在不需要的地方进行宏替换。这很可能会导致奇怪的编译错误。
            2:其次，使用宏调试代码通常更困难。尽管您的源代码将具有宏的名称，但编译器和调试器永远不会看到该宏，因为它在运行之前已被替换。许多调试器无法检查宏的值，并且在使用宏时通常功能有限
            3:宏替换的行为与 C++ 中其他所有内容都不同。结果很容易犯无心的错误。常量变量不存在这些问题：它们遵循正常的作用域规则，可以被编译器和调试器看到，并且行为一致

    *constant expression:常量表达式是仅包含编译时常量和支持编译时求值的运算符/函数的表达式
        *编译时常量是在编译时必须知道其值的常量,这包括
            .文字（例如“5”、“1.2”）
            .常量表达式变量
            .具有常量表达式初始值设定项的常量整型变量（例如 const int x { 5 };
            .非类型模板参数
            .Enumerators

        *非编译时常量的 const 变量有时称为运行时常量。运行时常量不能在常量表达式中使用。
        *使变量常量有助于编译器优化。

        constexpr:表示编译时常量变量（constant expression的缩写）
                    变量必须使用常量表达式进行初始化，否则将导致编译错误

    Const vs constexpr：
        *对于变量来说，const意味着对象的值在初始化后就不能改变。 Constexpr 意味着对象必须具有编译时已知的值
        *Constexpr 变量是隐式 const。 const 变量不是隐式 constexpr（带有常量表达式初始值设定项的 const 整型变量除外
        *虽然一个变量可以同时定义为 constexpr 和 const，但大多数情况下这是多余的，我们只需要使用 const 或 constexpr 中的一个即可。

    Const 和 constexpr 函数参数：普通函数调用在运行时进行评估，提供的参数用于初始化函数的参数。由于函数参数的初始化发生在运行时，这会导致两个后果
            1：const 函数参数被视为运行时常量（即使提供的参数是编译时常量）
            2:函数参数不能声明为 constexpr，因为它们的初始化值直到运行时才确定。

    最佳实践：
            *任何其初始值设定项是常量表达式的常量变量都应声明为 constexpr
            *任何初始值设定项不是常量表达式的常量变量都应声明为 const


    命名法回顾:
        *Compile-time constant:其值必须在编译时已知的对象（例如文字和 constexpr 变量）
        *Constexpr:将变量声明为编译时常量（以及可以在编译时评估的函数）的关键字。非正式地，“constant expression”的简写。
        *Constant expression:仅包含编译时常量和支持编译时求值的运算符/函数的表达式
        *Runtime expression:不是常量表达式的表达式。
        *Runtime constant:不是编译时常量的常量对象

概述：
    C++ 和标准库提供了几种更好的处理字符串的方法：std::string 和 std::wstring 类
        通过使用构造函数、析构函数和运算符重载等 C++ 概念，std::string 允许您以直观和安全的方式创建和操作字符串！
        没有更多的内存管理，没有更多奇怪的函数名称，并且灾难的可能性大大降低。

    标准库中的所有字符串功能都存在于<string>头文件中.

<string>中实际上有 3 个不同的字符串类:
    basic_string:
        你不会直接使用这个类，所以暂时不用担心特性或分配器是什么。在几乎所有可以想象的情况下，默认值就足够了。

    string:
        用于标准 ascii 和 utf-8 字符串

    wstring:
        用于 wide-character/unicode (utf-16)字符串

        note:
            没有用于 utf-32 字符串的内置类（尽管如果需要，您应该能够从 basic_string 扩展您自己的类）。
