lvalues and rvalues(左值与右值):
    *识别左值和右值表达式的经验法则：
        lvalues:左值表达式是那些计算结果为变量或其他可识别对象的表达式，这些对象在表达式末尾持续存在
        rvalues:右值表达式是那些计算结果为由函数/运算符返回的文字或值的表达式，这些表达式在表达式末尾被丢弃。

    *左值引用类型:
        *引用本质上与被引用的对象相同

        *与常量非常相似，所有引用都必须初始化。

        *一旦初始化，C++ 中的引用就无法重新定位，这意味着无法将其更改为引用另一个对象

        *引用不是对象,
            因为引用不是对象，所以不能在需要对象的任何地方使用它们（例如，您不能拥有对引用的引用，因为左值引用必须引用可识别的对象）
        
        *绑定到临时对象的常量引用延长了临时对象的生命周期
            eg:
                #include <iostream>
                int main()
                {
                    const int& ref { 5 }; // The temporary object holding value 5 has its lifetime extended to match ref

                    std::cout << ref << '\n'; // Therefore, we can safely use it here

                    return 0;
                } // Both ref and the temporary object die here
            
        *左值引用不能绑定到不可修改的左值或右值（否则您可以通过引用更改这些值)
            因此，左值引用有时也称为非常量左值引用（有时简称为非常量引用）
            eg:
                int main()
                {
                    int x { 5 };
                    int& ref { x }; // valid: lvalue reference bound to a modifiable lvalue

                    const int y { 5 };
                    int& invalidRef { y };  // invalid: can't bind to a non-modifiable lvalue
                    int& invalidRef2 { 0 }; // invalid: can't bind to an rvalue

                    return 0;
                }            

        *从编译器的角度来看，& 符号是“附加”到类型名称 (int& ref) 还是变量名称 (int &ref) 并不重要，您选择哪个只是风格问题
            Best practice:
                定义引用时，请将“&”号放在类型旁边

    *Constexpr 左值引用:
         Constexpr 引用有一个特定的限制：它们只能绑定到具有静态持续时间的对象（全局或静态局部）。这是因为编译器知道静态对象将在内存中实例化，因此它可以将该地址视为编译时常量
            eg：
                int g_x { 5 };
                int main()
                {
                    [[maybe_unused]] constexpr int& ref1 { g_x }; // ok, can bind to global

                    static int s_x { 6 };
                    [[maybe_unused]] constexpr int& ref2 { s_x }; // ok, can bind to static local

                    int x { 6 };
                    [[maybe_unused]] constexpr int& ref3 { x }; // compile error: can't bind to non-static object

                    return 0;
                }

        当定义对 const 变量的 constexpr 引用时，我们需要同时应用 constexpr（适用于引用）和 const（适用于被引用的类型）。
            eg:
                int main()
                {
                    static const int s_x { 6 }; // a const int
                    [[maybe_unused]] constexpr const int& ref2 { s_x }; // needs both constexpr and const

                    return 0;
                }


Enumerations：
        *枚举（也称为枚举类型或枚举）是一种复合数据类型，其值仅限于一组命名符号常量（称为枚举数）。

        *C++ 支持两种枚举：无作用域枚举 和 有作用域枚举

        *枚举数是隐式 constexpr

        *枚举类型是不同的类型,这意味着编译器可以将其与其他类型区分开来

        *枚举大小和基础类型:
            枚举数具有整数类型的值,C++ 标准没有指定应将哪种特定整型类型用作基础类型，因此选择是实现定义的。
                可以显式指定枚举的基础类型。
                    eg:
                        enum Color : std::int8_t
                        {

                        }
        
    无作用域枚举:
            *通过 enum 关键字定义   
                eg:15.1
            *无作用域枚举之所以如此命名，是因为它们将枚举器名称放入与枚举定义本身相同的作用域中,最好将枚举放在命名范围区域（例如命名空间或类）中，这样枚举器就不会污染全局命名空间
                eg:15.2


    作用域枚举:
        *作用域枚举的工作方式与无作用域枚举类似
            但有两个主要区别：
                    1:它们不会隐式转换为整数
                    2:枚举数仅放置在枚举的范围区域中（而不是放置在定义枚举的范围区域中）。
                        eg:15.3

        *using enum statements :
            C++20 中引入的 using enum 语句将所有枚举器从枚举导入到当前作用域中。当与枚举类类型一起使用时，这允许我们访问枚举类枚举器，而不必在每个枚举器前面加上枚举类的名称前缀
                eg：15.4


        *note:
            *尽管作用域枚举使用 class 关键字，但它们不被视为“类类型”（为结构、类和联合保留）
                enum struct 也可以在这种情况下工作，并且行为与枚举类相同。但是，使用 enum struct 并不符合惯用用法，因此请避免使用它

            *与无作用域枚举不同，无作用域枚举将其枚举器放置在与枚举本身相同的作用域中，有作用域枚举仅将其枚举器放置在枚举的作用域区域中。
                换句话说，作用域枚举就像其枚举器的命名空间。这种内置命名空间有助于减少全局命名空间污染以及在全局作用域中使用作用域枚举时发生名称冲突的可能性。
                要访问作用域枚举器，我们这样做就像它位于与作用域枚举同名的命名空间中一样：
                

        *Best practice：
            优先使用作用域枚举而不是无作用域枚举，除非有令人信服的理由不这样做。



    Key insight:
        *左值表达式计算结果为可识别对象
        *右值表达式计算结果为一个值




    Type	            Meaning	                                                                    Examples

    Fundamental	        A type built into the core C++ language	                                    int, std::nullptr_t

    Compound	        A type built from fundamental types	                                        int&, double*, std::string, Fraction

    User-defined	    A class type or enumerated type
                        (Includes those defined in the standard library or implementation)
                        (In casual use, typically used to mean program-defined types)	            std::string, Fraction

    Program-defined	    A class type or enumerated type
                        (Excludes those defined in standard library or implementation)         


struct:
    *initializers:
        *结构中的每个成员都按照声明的顺序进行初始化，
            如果聚合已初始化，但初始化值的数量少于成员的数量，则所有剩余成员都将使用空的初始值设定项列表进行初始化

                eg：15.5，15.6
        
        *Default member initialization
            当我们定义结构（或类）类型时，我们可以为每个成员提供默认初始化值作为类型定义的一部分。
                eg:15.7

            note:显式初始化值优先于默认值

        *initialization possibilities
            *如果使用初始化列表定
                1:如果存在显式初始化值，则使用该显式值
                2:如果缺少初始值设定项并且存在默认成员初始值设定项，则使用默认值。
                3:如果缺少初始值设定项且不存在默认成员初始值设定项，则会发生值初始化。

            *如果未使用初始化列表定
                1：如果存在默认成员初始值设定项，则使用默认值。
                2：如果不存在默认成员初始值设定项，则该成员保持未初始化状态。

            eg: 15.8

            *note:
                为了避免出现未初始化成员的可能性，只需确保每个成员都有一个默认值（显式默认值或一对空大括号）,这样，无论我们是否提供初始化列表，我们的成员都将被初始化为某个值。


    *Const structs:
        结构类型的变量可以是 const （或 constexpr），并且就像所有 const 变量一样，它们必须被初始化

    
  