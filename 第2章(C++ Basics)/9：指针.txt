概述：
    指针是一个将内存地址（通常是另一个变量）作为其值的对象。这允许我们存储其他对象的地址以供稍后使用
        与使用与号 (&) 字符声明引用类型非常相似，指针类型使用星号 (*) 声明
            eg:
                int;  // a normal int
                int&; // an lvalue reference to an int value

                int*; // a pointer to an int value (holds the address of an integer value)   

    指针初始化:
        与普通变量一样，指针默认情况下不会初始化。未初始化的指针有时称为野指针。野指针包含垃圾地址，取消引用通配指针将导致未定义的行为.因此，您应该始终将指针初始化为已知值
            eg:
                #include <iostream>
                int main()
                {
                    int x{ 5 };
                    std::cout << x << '\n'; // print the value of variable x

                    int* ptr{ &x }; // ptr holds the address of x
                    std::cout << *ptr << '\n'; // use dereference operator to print the value at the address that ptr is holding (which is x's address)

                    return 0;
                }


        note:
            此星号(*)是指针声明语法的一部分，而不是取消引用运算符的使用

    引用和指针的区别:
        *引用必须初始化，指针不需要初始化（但应该初始化）
        *引用不是对象，指针才是
        *引用不能被重新定位（更改为引用其他内容），指针可以更改它们所指向的内容
        *引用必须始终绑定到一个对象，指针可以指向空的
        *引用是“安全的”（悬空引用之外），指针本质上是危险的

            note:
                *优先选择通过引用传递而不是通过地址传递，除非您有特定原因要使用通过地址传递
                *优先选择按引用返回而不是按地址返回，除非返回“无对象”（使用 nullptr）的能力很重要

            example:

                #include <iostream>
                void printByValue(int val) // The function parameter is a copy of the argument
                {
                    std::cout << val << '\n'; // print the value via the copy
                }
                void printByReference(const int& ref) // The function parameter is a reference that binds to the argument
                {
                    std::cout << ref << '\n'; // print the value via the reference
                }
                void printByAddress(const int* ptr) // The function parameter is a pointer that holds the address of the argument
                {
                    std::cout << *ptr << '\n'; // print the value via the dereferenced pointer
                }
                int main()
                {
                    printByValue(5);     // valid (but makes a copy)
                    printByReference(5); // valid (because the parameter is a const reference)
                    printByAddress(&5);  // error: can't take address of r-value
                    return 0;
                }            


    null pointers:
        当指针持有空值时，意味着该指针没有指向任何东西。这样的指针称为空指针
            eg:
                int* ptr {}; // ptr is now a null pointer, and is not holding an address
                int* ptr2= nullptr;

        note:
            *现代 C++ 中应避免使用 0 和 NULL（使用 nullptr 代替）。
            *由于 nullptr 可以与函数重载中的整数值区分开来，因此它必须具有不同的类型,其类型为:std::nullptr_t (defined in header <cstddef>)
                std::nullptr_t 只能保存一个值：nullptr

                    eg:
                        #include <iostream>
                        #include <cstddef> // for std::nullptr_t
                        void print(std::nullptr_t)
                        {
                            std::cout << "in print(std::nullptr_t)\n";
                        }
                        void print(int*)
                        {
                            std::cout << "in print(int*)\n";
                        }
                        int main()
                        {
                            print(nullptr); // calls print(std::nullptr_t)

                            int x { 5 };
                            int* ptr { &x };

                            print(ptr); // calls print(int*)

                            ptr = nullptr;
                            print(ptr); // calls print(int*) (since ptr has type int*)

                            return 0;
                        }                    

    地址运算符(&):返回其操作数的内存地址
    解引用运算符(*):（有时也称为间接运算符）将给定内存地址处的值作为左值返回：
        eg:
            #include <iostream>
            int main()
            {
                int x{ 5 };
                std::cout << x << '\n';  // print the value of variable x
                std::cout << &x << '\n'; // print the memory address of variable x

                std::cout << *(&x) << '\n'; // print the value at the memory address of variable x (parentheses not required, but make it easier to read)

                return 0;
            }

        Key insight：
            *给定一个内存地址，我们可以使用解引用运算符 (*) 来获取该地址处的值（作为左值
            *地址操作符 (&) 和解引用操作符 (*) 的作用相反：地址操作符获取对象的地址，而解引用获取某个地址处的对象。


void pointer：
    void 指针，也称为泛型指针，是一种特殊类型的指针，可以指向任何数据类型的对象
        eg:
            void* ptr; // ptr is a void pointer


智能指针：
    智能指针是一个管理动态分配对象的类。
        *尽管智能指针可以提供其他功能，但智能指针的定义特征是它管理动态分配的资源，并确保在适当的时间（通常在智能指针超出范围时）正确清理动态分配的对象。
    
        *智能指针本身不应该被动态分配（否则，存在智能指针可能无法正确释放的风险，这意味着它拥有的对象不会被释放，从而导致内存泄漏）。
            通过始终在堆栈上分配智能指针（作为局部变量或类的组合成员），我们保证当智能指针包含的函数或对象结束时，智能指针将正确地超出范围，确保智能指针拥有的对象被正确释放。

        *智能指针类型:
            std::auto_ptr:
                    std::auto_ptr 在 C++11 中已被弃用并在 C++17 中被删除。 
                    缺点太多导致被删除：
                        *首先，因为 std::auto_ptr 通过复制构造函数和赋值运算符实现移动语义。将 std::auto_ptr 按值传递给函数将导致您的资源移动到函数参数（并在函数参数超出范围时在函数末尾被销毁）。
                            然后，当您从调用者访问您的 auto_ptr 参数时（没有意识到它已被转移和删除），您突然取消了对空指针的引用。碰撞！

                        *其次，std::auto_ptr 总是使用非数组删除来删除它的内容。这意味着 auto_ptr 不能正确处理动态分配的数组，因为它使用了错误的释放类型。
                            更糟糕的是，它不会阻止您将动态数组传递给它，然后它会管理不善，导致内存泄漏。
                        
                        *最后，auto_ptr 不能很好地与标准库中的许多其他类配合使用，包括大多数容器和算法。发生这种情况是因为那些标准库类假定当他们复制一个item时，它实际上是在复制，而不是移动。

                    std::auto_ptr 设计的核心问题是，在 C++11 之前，C++ 语言根本没有区分“复制语义”和“移动语义”的机制。
                        覆盖复制语义以实现移动语义会导致奇怪的边缘情况和无意的错误。例如，你可以写 res1 = res2 并且不知道 res2 是否会改变！
                            正因为如此，在 C++11 中，正式定义了“移动”的概念，并在语言中添加了“移动语义”，以正确区分复制和移动。

            std::unique_ptr:
                1:std::unique_ptr 是 std::auto_ptr 的 C++11 替代品。它应该用于管理不被多个对象共享的任何动态分配的对象
                    也就是说， std::unique_ptr 应该完全拥有它管理的对象，而不是与其他类共享该所有权。 std::unique_ptr 位于 <memory> 标头中
                        eg：9-1

                2: * 和 -> 操作符：
                    二者可用于返回被管理的资源。 * 返回对托管资源的引用，-> 返回一个指针。

                3:std::unique_ptr 和 arrays：
                    与 std::auto_ptr 不同，std::unique_ptr 足够聪明，可以知道是使用标量删除还是数组删除，因此 std::unique_ptr 可以用于标量对象和数组。
                        然而，std::array 或 std::vector（或 std::string）几乎总是比将 std::unique_ptr 与固定数组、动态数组或 C 样式字符串一起使用更好的选择。

                    最佳实践：
                        优先使用 std::array、std::vector 或 std::string，而不是管理固定数组、动态数组或 C 样式字符串的智能指针。

                滥用 std::unique_ptr：
                     Resource* res{ new Resource() };
                    std::unique_ptr<Resource> res1{ res };
                    std::unique_ptr<Resource> res2{ res };

                    虽然这在语法上是合法的，但最终结果将是 res1 和 res2 都将尝试删除资源，这将导致未定义的行为。

                不要从 std::unique_ptr 下手动删除资源:
                    Resource* res{ new Resource() };
                    std::unique_ptr<Resource> res1{ res };
                    delete res;

                    如果这样做，std::unique_ptr 将尝试删除已删除的资源，再次导致未定义的行为

                请注意， std::make_unique() 可防止上述两种情况意外发生。
                
            std::make_unique：
                *C++14 附带了一个名为 std::make_unique() 的附加函数。这个模板化的函数构造了一个模板类型的对象，并用传递给函数的参数对其进行初始化。

                *使用 std::make_unique() 是可选的，但建议您自己创建 std::unique_ptr。
                    这是因为使用 std::make_unique 的代码更简单，而且它也需要更少的输入（当与自动类型推导一起使用时）。此外，它还解决了 C++ 未指定函数参数的求值顺序可能导致的异常安全问题。

                    最佳实践：
                        使用 std::make_unique() 而不是创建 std::unique_ptr 并自己使用 new 

                    eg:9-2.9-3

            std::shared_ptr:
                std::shared_ptr 旨在解决您需要多个智能指针共同拥有资源的情况。
                    只要至少有一个 std::shared_ptr 指向该资源，即使个别 std::shared_ptr 被销毁，该资源也不会被释放。
                    一旦管理资源的最后一个 std::shared_ptr 超出范围（或被重新分配以指向其他内容），该资源将被释放。
                    eg:9-4

                note:
                    如果您需要多个 std::shared_ptr 指向同一资源，请始终复制现有的 std::shared_ptr。

            std::make_shared:
                *就像 std::make_unique() 可用于在 C++14 中创建 std::unique_ptr 一样，std::make_shared() 可以（并且应该）用于创建 std::shared_ptr。 std::make_shared() 在 C++11 中可用。
                    eg:9-5

                *使用 std::make_shared() 的原因与 std::make_unique() 相同—— std::make_shared() 更简单、更安全（无法直接创建两个指向同一资源的 std::shared_ptr 使用这种方法）
                    但是， std::make_shared() 也比不使用它的性能更高.其原因在于 std::shared_ptr 跟踪有多少指针指向给定资源的方式。

            std::weak_ptr:
                *std::weak_ptr 旨在解决上述“循环所有权”问题(eg:9-6)

                *std::weak_ptr 是观察者
                    它可以观察和访问与 std::shared_ptr（或其他 std::weak_ptr）相同的对象，但它不被视为所有者。
                        请记住，当 std::shared 指针超出范围时，它只考虑其他 std::shared_ptr 是否共同拥有该对象。 std::weak_ptr 不计数！
                            eg:9-7
                    
                    缺点:
                         std::weak_ptr 不能直接使用（它们没有操作符->）。
                            要使用 std::weak_ptr，您必须首先将其转换为 std::shared_ptr。然后你可以使用std::shared_ptr。
                            要将 std::weak_ptr 转换为 std::shared_ptr，可以使用 lock() 成员函数。
                                eg:9-8

                结论：
                    当您需要多个可以共同拥有资源的智能指针时，可以使用 std::shared_ptr。当最后一个 std::shared_ptr 超出范围时，资源将被释放。
                    当您想要一个可以查看和使用共享资源但不参与该资源所有权的智能指针时，可以使用 std::weak_ptr。


Function Pointers:
    指向函数的指针
    eg：
        int (*fcnPtr)();     // fcnPtr is a pointer to a function that takes no arguments and returns an integer
        int (*const fcnPtr)();

    注:
        默认参数不适用于通过函数指针调用的函数(一个是编译时，一个是运行时)

    使用类型别名使函数指针更漂亮：
        eg:
            using ValidateFunction = bool(*)(int, int);

    Using std::function:

        定义和存储函数指针的另一种方法是使用 std::function，它是标准库 <functional> 头文件的一部分
        eg：
            bool validate(int x, int y, std::function<bool(int, int)> fcn); // std::function method that returns a bool and takes two int parameters

            std::function<int()> fcnPtr{ &foo }

            using ValidateFunctionRaw = bool(*)(int, int); // type alias to raw function pointer
            using ValidateFunction = std::function<bool(int, int)>; // type alias to std::function

        
        Type inference for function pointer：
            eg:
                auto fcnPtr{ &foo };

    默认参数不适用于通过函数指针调用的函数:
        当编译器遇到对带有一个或多个默认参数的函数的正常函数调用时，它会重写该函数调用以包含默认参数。此过程发生在编译时，因此只能应用于可以在编译时解析的函数。
            但是，当通过函数指针调用函数时，它会在运行时解析。在这种情况下，不需要重写函数调用来包含默认参数。
            这意味着我们可以使用函数指针来消除函数调用的歧义，否则函数调用会因默认参数而产生歧义。
            由于解析发生在运行时，因此当通过函数指针调用函数时，不会解析默认参数。
            

        建议:
            *因为声明函数指针的原生语法丑陋且容易出错，我们建议使用 std::function。
            *在函数指针类型只使用一次的地方（例如单个参数或返回值），可以直接使用 std::function
            *在多次使用函数指针类型的地方， std::function 的类型别名是更好的选择（以防止重复自己）


    




