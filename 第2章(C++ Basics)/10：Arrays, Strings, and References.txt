C-style strings:
    C 风格的字符串只是一个使用空终止符的字符数组。空终止符是一个特殊字符（'\0'，ascii 代码 0），用于指示字符串的结尾。更一般地说，C 风格的字符串称为空终止字符串。
        eg:
        char myString[]{ "string" };

    note:
        *尽管 std::string 要求以 null 终止（从 C++11 开始），但 std::string 的返回长度不包括隐式 null 终止符。
        *每当初始化 std::string 时，都会创建用于初始化它的字符串的副本。复制字符串的成本很高，因此应注意尽量减少复制的数量。
        *在大多数其他情况下，最好避免按值返回 std::string，因为这样做会产生昂贵的副本
        *C 风格的字符串文字和 std::string 始终以 null 终止。

std::string_view(c++17)：
    为了解决 std::string 初始化（或复制）成本高昂的问题，C++17 引入了 std::string_view （位于 <string_view> 标头中)
    std::string_view 提供对现有字符串（C 样式字符串、std::string 或另一个 std::string_view）的只读访问，而无需进行复制。只读意味着我们可以访问和使用正在查看的值，但不能修改它
        eg:
             std::string_view str{ "Trains are fast!" };

    *std::string_view 不仅速度快，而且具有我们从 std::string 中知道的许多功能
    *C 风格字符串和 std::string 都会隐式转换为 std::string_view。因此，std::string_view 参数将接受 C 风格字符串、std::string 或 std::string_view 类型的参数
    *std::string_view 不会隐式转换为 std::string
    *将新字符串分配给 std::string_view 会导致 std::string_view 查看新字符串。它不会以任何方式修改先前正在查看的字符串

    最佳实践：
        *使用 std::string_view 而不是 C 风格的字符串
        *对于只读字符串，最好使用 std::string_view 而不是 std::string，除非您已经有一个 std::string
        *最好使用 std::string_view（按值）而不是 const std::string& 传递字符串，除非您的函数调用其他需要 C 样式字符串或 std::string 参数的函数
        *std::string_view 的最佳用途是作为只读函数参数。这允许我们传入 C 风格的字符串、std::string 或 std::string_view 参数而无需复制，因为 std::string_view 将为参数创建一个视图

    note:
        *std::string_view 在其整个生命周期中仍然依赖于初始化器。如果正在使用视图时修改或销毁正在查看的字符串，则会导致意外或未定义的行为
        *修改 std::string 会使该 std::string_view 的所有视图无效。

 arrays
    fix array:
        *固定数组作为参数的时候，将衰减（隐式转换）为指向数组第一个元素的指针，所以不能用 size 获取他的长度

    allocating arrays:
        eg：
             int* array{ new int[length]{} }
               delete[] array; // use array delete to deallocate array

             double* ptr { new double[5] };


Best practice:
    *如果使用 std::getline() 读取字符串，请使用 std::cin >> std::ws 输入操纵器来忽略前导空格.  
        std::getline() 不会忽略前导空格。如果您希望它忽略前导空格，请传递 std::cin >> std::ws 作为第一个参数。当遇到换行符时它会停止提取
  
    *constexpr std::string 在 C++17 或更早版本中根本不受支持，并且仅在 C++20/23 中的非常有限的情况下起作用。如果您需要 constexpr 字符串，请改用 std::string_view 


关于何时使用 std::string 与 std::string_view 的快速指南:
    *在以下情况下使用 std::string 变量: 
        1:您需要一个可以修改的字符串
        2:您需要存储用户输入的文本
        3:您需要存储返回 std::string 的函数的返回值

    *在以下情况下使用 std::string_view 变量:
        1:您需要对已存在于其他地方的字符串的部分或全部进行只读访问，并且在 std::string_view 使用完成之前不会被修改或销毁
        2:您需要一个 C 风格字符串的符号常量
        3:通过左值引用传递

    *在以下情况下使用 std::string_view 函数参数:
        1:该函数需要一个只读字符串

    *在以下情况下使用 std::string 返回类型:
        1:返回值是一个 std::string 局部变量
        2:返回值是按值返回 std::string 的函数调用或运算符。
        3:按引用返回和按地址返回

    *在以下情况下使用 std::string_view 返回类型
        1:该函数返回一个 C 风格字符串文字或已使用 C 风格字符串文字初始化的本地 std::string_view
        2:该函数返回一个 std::string_view 参数

    *关于 std::string 需要记住的事情
        1:初始化和复制 std::string 的成本很高，因此请尽可能避免这种情况
        2:避免按值传递 std::string，因为这会生成副本。
        3:如果可能，请避免创建短暂的 std::string 对象。
        4:修改 std::string 将使对该字符串的任何视图无效。

    *关于 std::string_view 需要记住的事情：
        1：std::string_view 通常用于传递字符串函数参数并返回字符串文字
        2：由于整个程序都存在 C 风格字符串文字，因此将 std::string_view 设置为 C 风格字符串文字总是可以的
        3：当一个字符串被销毁时，该字符串的所有视图都将失效。
        4：使用无效的视图（而不是使用赋值来重新验证视图）将导致未定义的行为。
        5：std::string_view 可能会或可能不会以 null 终止。


reference:
    Best practice:
        1:根据经验，按值传递基本类型，并按 const 引用传递类（或结构）类型
        2:其他按值传递的常见类型：枚举类型和 std::string_view
        3:通过（const）引用传递的其他常见类型：std::string、std::array 和 std::vector

        4:对于复制成本较低的对象，复制的成本与绑定的成本相似，因此我们倾向于按值传递，这样生成的代码会更快。
        5:对于复制成本较高的对象，复制的成本占主导地位，因此我们倾向于传递（const）引用以避免进行复制
    



             