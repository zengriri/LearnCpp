声明和定义
    *声明是一个标识符，而定义就像是实例化一个对象，eg ing a=5; a是一个标识符，他表示一个int类型，值为5的对象。

    *声明满足于编译器，而不满足于连接器。而定义两者皆可。因此：在 C++ 中，所有定义也用作声明。这就是为什么 int x 出现在我们的定义和声明示例中的原因
    
    *lifetime 是一个运行时属性，而 scope 是一个编译时属性


        #include <iostream>
        int add(int x, int y); // forward declaration of add() using function prototype
        int main()
        {
            std::cout << "The sum of 3 and 4 is: " << add(3, 4) << '\n';
            return 0;
        }
        // note: No definition for function add

        分析:1：函数已声明，但却未定义，为什么编译通过?
            answer:虽然前向声明，但从未调用过该函数，则程序将编译并运行良好。  
                    但是，如果进行了前向声明并调用了函数，但程序从未定义函数，则程序可以编译，但链接器会抱怨它无法解析函数调用

    *前向声明：
        函数使用前，请进行先声明,

    *单一定义规则（The one definition rule (ODR)）
        1：在给定的文件中，函数、变量、类型或模板只能有一个定义。
        2：在给定的程序中，变量或普通函数只能有一个定义，做出这种区分是因为程序可以有多个文件。
        3：类型、模板、内联函数和内联变量允许在不同的文件中具有相同的定义。
    
    *未引用的参数:
        在函数定义中，函数参数的名称是可选的。因此，当函数参数需要存在但函数体中没有使用时，可以简单地省略名称,没有名称的参数称为未命名参数or未引用参数
        eg:
        void doSomething(int /*count*/){}



    内联函数:
        有资格扩展其函数调用的函数称为内联函数


        *C++ 编译器有一个技巧可以用来避免这种开销成本：内联扩展是一个函数调用被调用函数定义中的代码替换的过程。
        *内联扩展可以让编译器更有效地优化生成的代码

        缺点:
            如果被扩展的函数的主体比被替换的函数调用需要更多的指令，，那么每次内联扩展都会导致可执行文件变大。较大的可执行文件往往速度较慢（由于不适合缓存）。


        *所以，内联扩展可能会导致性能提高、性能降低或根本不改变性能，这取决于函数调用的相对成本、函数的大小以及可以执行的其他优化


        *现代优化编译器通常非常擅长确定哪些函数应该内联——在大多数情况下比人类更好。结果，编译器可能会忽略或贬低您对内联函数所做的任何请求。

        *内联函数有两个主要要求：
            1：编译器需要能够在使用该函数的每个翻译单元中查看内联函数的完整定义（前向声明本身是不够的）
                如果还提供了前向声明，则定义可以在使用点之后发生。每个翻译单元只能出现一个这样的定义，否则将出现编译错误
            2：内联函数的每个定义必须相同，否则将导致未定义的行为

        *以下是隐式内联的：
            1:在类、结构或联合类型定义中定义的函数
            2:Constexpr / consteval 函数
            3:从函数模板隐式实例化的函数

        *为什么不将所有函数内联并定义在头文件中？
            1:它会增加编译时间。当代码文件中的函数发生更改时，只需要重新编译该代码文件。
                当头文件中的内联函数发生变化时，包含该头文件的每个代码文件(直接或通过另一个头文件)都需要重新编译。在大型项目中，这可能会产生巨大的影响
            2:它可能会导致更多的命名冲突，因为您最终会在单个代码文件中包含更多代码

        最佳实践：
            不要使用 inline 关键字来请求函数的内联扩展。

        note:
            在前面的章节中，我们提到不应在头文件中实现函数（具有外部链接），因为当这些头文件包含在多个 .cpp 文件中时，函数定义将被复制到多个 .cpp 文件中。
                然后这些文件将被编译，链接器将抛出一个错误，因为它会注意到您多次定义了同一个函数，这违反了单一定义规则。

            在现代 C++ 中，术语内联已演变为“允许多个定义”的意思。因此，内联函数是一种允许在多个翻译单元中定义的函数（不违反 ODR）
                链接器会将标识符的所有内联函数定义合并为单个定义（因此仍然满足单一定义规则的要求）
            
            内联函数通常在头文件中定义，可以将它们#included 到任何需要查看标识符的完整定义的代码文件的顶部。这确保了标识符的所有内联定义都是相同的。

            
    Constexpr functions:
        constexpr 函数是可以在编译时计算其返回值的函数。要使函数成为 constexpr 函数，我们只需在返回类型前面使用 constexpr 关键字即可
            当在编译时评估函数调用时，编译器将在编译时计算函数调用的返回值，然后用返回值替换函数调用。

        *Constexpr 函数也可以在运行时评估

        Key insight:
                    *Constexpr 函数允许我们编写可以在编译时评估的函数
                    *允许在编译时或运行时评估具有 constexpr 返回类型的函数，以便单个函数可以服务于这两种情况
                        否则，您需要有单独的函数（一个具有 constexpr 返回类型的函数和一个具有非 constexpr 返回类型的函数）
                        这不仅需要重复的代码，两个函数还需要有不同的名称！
                    *constexpr 函数参数意味着只能使用 constexpr 参数调用该函数。但事实并非如此——当函数在运行时求值时，可以使用非 constexpr 参数来调用 constexpr 函数
                    
        note:
            *constexpr 函数的参数不是隐式 constexpr，也不能声明为 constexpr

        constexpr 函数是隐式内联的
            *由于 constexpr 函数可能在编译时求值，因此编译器必须能够在调用该函数的所有点看到 constexpr 函数的完整定义.即使实际的函数定义稍后出现在同一编译单元中，前向声明也是不够的.
                这意味着在多个文件中调用的 constexpr 函数需要将其定义包含在每个此类文件中——这通常会违反单一定义规则。为了避免此类问题，constexpr 函数是隐式内联的，这使得它们不受单一定义规则的约束
                因此，constexpr 函数通常在头文件中定义，因此可以将它们#included 到任何需要完整定义的 .cpp 文件中

            *note:编译器必须能够看到 constexpr（或 consteval）函数的完整定义，而不仅仅是前向声明。

        consteval:
            C++20引入了关键字consteval，它用于指示函数必须在编译时求值，否则会导致编译错误。此类函数称为立即函数。

            note:
                如果您有一个函数由于某种原因（例如性能）必须在编译时运行，请使用 consteval。

    匿名函数:
        lambda 表达式（也称为 lambda 或闭包）允许我们在另一个函数中定义一个匿名函数。嵌套很重要，因为它让我们既可以避免命名空间命名污染，又可以将函数定义为尽可能靠近使用它的位置（提供额外的上下文）
             *lambda 的这种用法有时被称为函数字面量。

        语法格式
            [ captureClause ] ( parameters ) -> returnType
            {
                statements;
            }

            注:
               *如果不需要，捕获子句和参数都可以为空。
               *返回类型是可选的，如果省略，将假定为 auto（因此使用类型推断来确定返回类型）。
                    eg：2-1


        类型：
            *就像我们可以用字面值（或函数指针）初始化一个变量以供以后使用一样，我们也可以用 lambda 定义初始化一个 lambda 变量，然后再使用它
                一个命名的 lambda 和一个好的函数名可以使代码更容易阅读。
            eg:
                return std::all_of(array.begin(), array.end(), [](int i){ return ((i % 2) == 0); });
                替换为：
                        auto isEven{
                        [](int i)
                        {
                            return ((i % 2) == 0);
                        }
                        };

                        return std::all_of(array.begin(), array.end(), isEven);

            lambda isEven 的类型是什么？
                *事实证明，lambda 没有我们可以显式使用的类型。当我们编写一个 lambda 时，编译器会为未暴露给我们的 lambda 生成一个唯一类型

                *实际上，lambda 不是函数（这是它们如何避免 C++ 不支持嵌套函数的限制的一部分）

                *它们是一种特殊的对象，称为函子。函子是包含重载 operator() 的对象，使它们像函数一样可调用。


                *虽然我们不知道 lambda 的类型，但有几种存储 lambda 以供后定义使用的方法：
                    1：指针
                    2：function
                    2:auto

                *使用 lambda 的实际类型的唯一方法是通过 auto。与 std::function 相比， auto 还具有没有开销的好处
                *使用 lambda 初始化变量时使用 auto，如果无法使用 lambda 初始化变量，则使用 std::function。

                    eg:2-2

        Generic lambdas:
            *在大多数情况下，lambda 参数的工作规则与常规函数参数相同
            *当 lambda 具有一个或多个 auto 参数时，编译器将从对 lambda 的调用中推断出需要哪些参数类型。
                eg2-3

        Generic lambdas and static variables：
            需要注意的一件事是，将为自动解析到的每种不同类型生成一个唯一的 lambda
                eg:2-4

        
        Lambda 捕获:
            *lambda 只能访问特定类型的标识符：全局标识符、编译时已知的实体以及具有静态存储持续时间的实体。capture 子句用于（间接）让 lambda 访问它通常无法访问的周围范围内可用的变量

            *当执行 lambda 定义时，对于 lambda 捕获的每个变量，都会在 lambda 中创建该变量的克隆（具有相同的名称）。这些克隆的变量此时从同名的外部范围变量初始化。
                注：
                    捕获的 lambda 变量是外部范围变量的克隆，而不是实际变量。
                    *当编译器遇到 lambda 定义时，它会为 lambda 创建一个自定义对象定义。每个捕获的变量都成为对象的数据成员。
                    *在运行时，当遇到 lambda 定义时，将实例化 lambda 对象，并在该点初始化 lambda 的成员

                eg：2-5


            *捕获默认为 const 值
                这意味着当创建 lambda 时，lambda 会捕获外部范围变量的常量副本，这意味着不允许 lambda 修改它们

            Mutable capture by value：
                *为了允许修改通过值捕获的变量，我们可以将 lambda 标记为可变。在此上下文中的 mutable 关键字删除了 const

                *请注意，ammo 的值会在对 lambda 的调用中保留！

                eg:2-6


        Capture by reference
            *要通过引用捕获变量，我们在捕获中的变量名称前添加一个和号 (&)
            *与按值捕获的变量不同，按引用捕获的变量是非常量的，除非它们捕获的变量是 const
            *每当您通常希望通过引用将参数传递给函数时，按引用捕获应该优先于按值捕获

            eg：2-7
        

        Default captures：
            默认捕获（也称为默认捕获）捕获 lambda 中提到的所有变量。如果使用默认捕获，则不会捕获 lambda 中未提及的变量

                *要按值捕获所有使用的变量，请使用捕获值 =。
                *要通过引用捕获所有使用的变量，请使用 & 的捕获值。

                    eg:
                        int health{ 33 };
                        int armor{ 100 };
                        std::vector<CEnemy> enemies{};

                        // Capture health and armor by value, and enemies by reference.
                        [health, armor, &enemies](){};

                        // Capture enemies by reference and everything else by value.
                        [=, &enemies](){};

                        // Capture armor by value and everything else by reference.
                        [&, armor](){};

                        // Illegal, we already said we want to capture everything by reference.
                        [&, &armor](){};

                        // Illegal, we already said we want to capture everything by value.
                        [=, armor](){};

                        // Illegal, armor appears twice.
                        [armor, &health, &armor](){};

                        // Illegal, the default capture has to be the first element in the capture group.
                        [armor, &](){};

        注：
            通过引用捕获变量时要格外小心，尤其是使用默认引用捕获。捕获的变量必须比 lambda 寿命更长
    
        可变 lambda 的意外副本:

            eg：
                #include <iostream>
                int main()
                {
                int i{ 0 };

                // Create a new lambda named count
                auto count{ [i]() mutable {
                    std::cout << ++i << '\n';
                } };

                count(); // invoke count

                auto otherCount{ count }; // create a copy of count

                // invoke both count and the copy
                count();
                otherCount();

                return 0;
                }

                    Output
                    1
                    2
                    2

                代码不是打印 1、2、3，而是两次打印 2
                .当我们创建 otherCount 作为 count 的副本时，我们创建了当前状态的 count 副本。 count 的 i 是 1，所以 otherCount 的 i 也是 1。由于 otherCount 是 count 的副本，因此它们每个都有自己的 i

            *幸运的是，C++ 提供了一种方便的类型（作为 <functional> 标头的一部分），称为 std::reference_wrapper，它允许我们像传递引用一样传递普通类型。
                eg:
                    #include <iostream>
                    #include <functional>

                    void invoke(const std::function<void()>& fn)
                    {
                        fn();
                    }

                    int main()
                    {
                        int i{ 0 };

                        // Increments and prints its local copy of @i.
                        auto count{ [i]() mutable {
                        std::cout << ++i << '\n';
                        } };

                        // std::ref(count) ensures count is treated like a reference
                        // thus, anything that tries to copy count will actually copy the reference
                        // ensuring that only one count exists
                        invoke(std::ref(count));
                        invoke(std::ref(count));
                        invoke(std::ref(count));

                        return 0;
                    }


        Defining new variables in the lambda-capture:  
            有时我们想要捕获一个稍作修改的变量，或者声明一个仅在 lambda 范围内可见的新变量。我们可以通过在 lambda-capture 中定义一个变量而不指定它的类型来做到这一点
                eg:2-8

        Unintended copies of mutable lambdas:
            因为 lambdas 是对象，所以它们可以被复制。在某些情况下，这可能会导致问题
                eg：2-9，2-10，2-11


函数重载:
    *重载函数如何区分：
        包括:
            1：函数参数个数
            2：函数参数类型
        不包括:
            1:返回类型
            2：对于按值传递的参数，也不考虑 const 限定符。
                eg:
                    void print(int);
                    void print(const int); // not differentiated from print(int)

    *解决重载函数调用:当对重载函数进行函数调用时，编译器将逐步执行一系列规则，以确定哪个（如果有）重载函数是最佳匹配
        参数匹配序列:
            步骤1: 编译器尝试找到完全匹配。这分两个阶段发生
                1:首先，编译器将查看是否存在重载函数，其中函数调用中的参数类型与重载函数中的参数类型完全匹配。
                2:其次，编译器将对函数调用中的参数应用许多简单的转换。
                    简单转换是一组特定的转换规则，它们将修改类型（而不修改值）以查找匹配项。这些包括
                        <1>:左值到右值的转换
                        <2>:限定转换（例如非 const 到 const）
                        <3>非引用到引用的转换

            步骤2: 如果未找到完全匹配，编译器会尝试通过对参数应用数字提升来查找匹配。
                我们介绍了如何将某些窄整型和浮点类型自动提升为更宽的类型，例如 int 或 double.如果在数字提升之后找到匹配项，则函数调用将得到解决。

            步骤3: 如果通过数字提升未找到匹配项，编译器会尝试通过对参数应用数字转换来查找匹配项

            步骤4: 如果通过数值转换未找到匹配项，编译器将尝试通过任何用户定义的转换来查找匹配项。

            步骤5: 如果通过用户定义的转换未找到匹配项，编译器将查找使用省略号的匹配函数

            步骤6: 如果此时尚未找到匹配项，编译器将放弃并发出有关无法找到匹配函数的编译错误


delete函数：
    如果我们明确不想调用一个函数，我们可以使用 = delete 说明符将该函数定义为已删除。如果编译器将函数调用与已删除的函数相匹配，则编译将因编译错误而停止。
    
        eg:
            #include <iostream>

            void printInt(int x)
            {
                std::cout << x << '\n';
            }

            void printInt(char) = delete; // calls to this function will halt compilation
            void printInt(bool) = delete; // calls to this function will halt compilation

            int main()
            {
                printInt(97);   // okay

                printInt('a');  // compile error: function deleted
                printInt(true); // compile error: function deleted

                printInt(5.0);  // compile error: ambiguous match

                return 0;
            }

    Key insight:
        =删除的意思是“我禁止这个”，而不是“这个不存在”。删除的函数参与函数重载决策的所有阶段（不仅仅是精确匹配阶段）。如果选择了已删除的函数，则会出现编译错误

    删除所有不匹配的重载:删除一堆单独的函数重载效果很好，但可能很冗长。有时我们可能希望仅使用类型与函数参数完全匹配的参数来调用某个函数。我们可以通过使用函数模板来完成此操作
        eg：
            #include <iostream>
            // This function will take precedence for arguments of type int
            void printInt(int x)
            {
                std::cout << x << '\n';
            }
            // This function template will take precedence for arguments of other types
            // Since this function template is deleted, calls to it will halt compilation
            template <typename T>
            void printInt(T x) = delete;

            int main()
            {
                printInt(97);   // okay
                printInt('a');  // compile error
                printInt(true); // compile error

                return 0;
            }


默认参数：
    进行函数调用时，调用者可以选择为任何具有默认参数的函数参数提供参数。如果调用者提供参数，则使用函数调用中参数的值。如果调用者未提供参数，则使用默认参数的值。

    规则:
        1:在函数调用中，任何显式提供的参数都必须是最左边的参数（不能跳过具有默认值的参数）
        2:如果为参数指定了默认参数，则所有后续参数（右侧）也必须指定为默认参数。
        3：如果多个参数具有默认参数，则最左边的参数应该是最有可能由用户显式设置的参数。
       
    默认参数不能重新声明，必须在使用前声明：
        一旦声明，默认参数就不能在同一翻译单元中重新声明。这意味着对于具有前向声明和函数定义的函数，默认参数可以在前向声明或函数定义中声明，但不能同时在两者中声明。

        最佳实践是在前向声明中而不是在函数定义中声明默认参数，因为前向声明更有可能被其他文件看到并在使用前包含（特别是在头文件中）。

        Best practice：
            *如果函数有前向声明（尤其是头文件中的声明），请将默认参数放在那里。否则，将默认参数放入函数定义中。


模板函数：
    *函数模板是一种类似函数的定义，用于生成一个或多个重载函数，每个重载函数具有一组不同的实际类型。这将使我们能够创建可以与许多不同类型一起使用的函数。

        eg:
            template <typename T>
            T max(T x, T y)
            {
                return (x < y) ? y : x;
            }
            注：在这种情况下，typename 和 class 关键字没有区别。您经常会看到人们使用 class 关键字，因为它是较早引入到语言中的。
                但是，我们更喜欢较新的 typename 关键字，因为它更清楚地表明类型模板参数可以替换为任何类型（例如基本类型），而不仅仅是类类型

    *函数模板实际上并不是函数——它们的代码不会直接编译或执行。相反，函数模板只有一项工作：生成函数（被编译和执行）
    
    *实例化函数的过程很简单：编译器本质上克隆了主模板，并将模板类型 (T) 替换为我们指定的实际类型 (int)

    *只要实例化函数模板在语法上有意义，编译器就会成功编译它。然而，编译器没有任何方法来检查这样的函数在语义上是否确实有意义。
        
        eg:
            #include <iostream>

            template <typename T>
            T addOne(T x)
            {
                return x + 1;
            }

            int main()
            {
                std::cout << addOne("Hello, world!") << '\n';

                return 0;
            }            //注：在此示例中，我们对 C 样式字符串文字调用 addOne()。这在语义上实际上意味着什么？谁知道！也许令人惊讶的是，因为 C++ 在语法上允许将整数值添加到字符串文字中

        note:
            只要语法上有效，编译器就会实例化并编译语义上没有意义的函数模板。您有责任确保使用有意义的参数调用此类函数模板。

    *我们可以告诉编译器不允许使用某些参数实例化函数模板
        eg:
            #include <iostream>
            #include <string>

            template <typename T>
            T addOne(T x)
            {
                return x + 1;
            }

            // Use function template specialization to tell the compiler that addOne(const char*) should emit a compilation error
            // const char* will match a string literal
            template <>
            const char* addOne(const char* x) = delete;

            int main()
            {
                std::cout << addOne("Hello, world!") << '\n'; // compile error

                return 0;
            }       

    *static local variables:
        当在函数模板中使用静态局部变量时，从该模板实例化的每个函数都将具有静态局部变量的单独版本


    *在多个文件中使用函数模板
        eg: 
        //main.cpp 
            #include <iostream>
            template <typename T>
            T addOne(T x); // function template forward declaration

            int main()
            {
                std::cout << addOne(1) << '\n';
                std::cout << addOne(2.3) << '\n';

                return 0;
            }
        //add.cpp
            template <typename T>
            T addOne(T x) // function template definition
            {
                return x + 1;
            }
        
         注：如果 addOne 是非模板函数，则该程序可以正常工作：在 main.cpp 中，编译器会对 addOne 的前向声明感到满意，并且链接器会将 main.cpp 中对 addOne() 的调用连接到 add.cpp 中的函数定义.
            但是因为 addOne 是一个模板，所以这个程序不起作用，我们得到一个链接器错误：

        原因：
            在 main.cpp 中，我们调用 addOne<int> 和 addOne<double>。但是，由于编译器看不到函数模板 addOne 的定义，因此无法在 main.cpp 中实例化这些函数。
                不过，它确实看到了 addOne 的前向声明，并且会假设这些函数存在于其他地方，并将在稍后链接。
            当编译器去编译add.cpp时，它会看到函数模板addOne的定义。但是，add.cpp 中没有使用此模板，因此编译器不会实例化任何内容。
                最终结果是链接器无法将对 main.cpp 中的 addOne<int> 和 addOne<double> 的调用连接到实际函数，因为这些函数从未实例化。

        As an aside:
            如果 add.cpp 已实例化这些函数，则该程序将可以正常编译和链接。但这样的解决方案很脆弱，
            应该避免：
                如果后来更改了 add.cpp 中的代码，使这些函数不再实例化，则程序将再次无法链接
                或者，如果 main.cpp 调用了未在 add.cpp 中实例化的不同版本的 addOne（例如 addOne<float>），我们会遇到同样的问题。

        解决方案：
            解决此问题的最传统方法是将所有模板代码放入头文件 (.h)，而不是源文件 (.cpp)：

        ODR:
            您可能想知道为什么这不会导致违反单一定义规则 (ODR)。 ODR 规定类型、模板、内联函数和内联变量允许在不同文件中具有相同的定义.

            模板定义不受单一定义规则的限制，即每个程序只需要一个定义，因此将相同的模板定义 #included 到多个源文件中不是问题.
                从函数模板隐式实例化的函数是隐式内联的，因此它们可以在多个文件中定义，只要每个定义都是相同的.
                模板本身不是内联的，因为内联的概念仅适用于变量和函数

        Best practice:
            多个文件中需要的模板应在头文件中定义，然后在需要的地方#included。这允许编译器查看完整的模板定义并在需要时实例化模板

     *具有多个模板类型参数的函数模板   
        eg:
            //由于 T 和 U 是独立的模板参数，因此它们彼此独立地解析其类型。这意味着 T 和 U 可以解析为不同类型，也可以解析为相同类型
            #include <iostream>
            template <typename T, typename U> // We're using two template type parameters named T and U
            T max(T x, U y) // x can resolve to type T, and y can resolve to type U
            {
                return (x < y) ? y : x; // uh oh, we have a narrowing conversion problem here
            }

            int main()
            {
                std::cout << max(2, 3.5) << '\n'; // resolves to max<int, double>

                return 0;
            }

    *auto(C++20):
        C++20 引入了 auto 关键字的新用法:
            当普通函数中使用 auto 关键字作为参数类型时，编译器会自动将函数转换为函数模板，每个 auto 参数成为独立的模板类型参数,
                这种创建函数模板的方法称为缩写函数模板
                    eg:
                        auto max(auto x, auto y)
                        {
                            return (x < y) ? y : x;
                        }           
            *如果您希望每个模板类型参数都是独立类型，则首选此形式，因为删除模板参数声明行使您的代码更加简洁和可读。   

            *Best practice:
                请随意使用带有单个自动参数的缩写函数模板，或者每个自动参数应该是独立类型（并且您的语言标准设置为 C++20 或更高版本）。 

    *overloaded:
        就像函数可能被重载一样，函数模板也可能被重载。此类重载可以具有不同数量的模板类型和/或不同数量或类型的函数参数
            eg:
                #include <iostream>

                // Add two values with matching types
                template <typename T>
                T add(T x, T y)
                {
                    return x + y;
                }

                // Add two values with non-matching types
                // As of C++20 we could also use auto add(auto x, auto y)
                template <typename T, typename U>
                T add(T x, U y)
                {
                    return x + y;
                }

                // Add three values with any type
                // As of C++20 we could also use auto add(auto x, auto y, auto z)
                template <typename T, typename U, typename V>
                T add(T x, U y, V z)
                {
                    return x + y + z;
                }

                int main()
                {
                    std::cout << add(1.2, 3.4) << '\n'; // instantiates and calls add<double>()
                    std::cout << add(5.6, 7) << '\n';   // instantiates and calls add<double, int>()
                    std::cout << add(8, 9, 10) << '\n'; // instantiates and calls add<int, int, int>()

                    return 0;
                }            


非类型模板参数:
    非类型模板参数是具有固定类型的模板参数，用作作为模板参数传入的 constexpr 值的占位符,
     就像 T 通常用作第一个类型模板参数的名称一样，N 通常用作 int 非类型模板参数的名称
  
    非类型模板参数可以是以下任何类型：
        .An integral type
        .An enumeration type
        .std::nullptr_t
        .A floating point type (since C++20)
        .A pointer or reference to an object
        .A pointer or reference to a function
        .A pointer or reference to a member function
        .A literal class type (since C++20)

        eg:
            #include <iostream>

            template <int N> // declare a non-type template parameter of type int named N
            void print()
            {
                std::cout << N << '\n'; // use value of N here
            }

            int main()
            {
                print<5>(); // 5 is our non-type template argument

                return 0;
            }

        Best practice:
            使用 N 作为 int 非类型模板参数的名称

        Key insight:
            非类型模板参数主要在我们需要将 constexpr 值传递给函数（或类类型）时使用，以便它们可以在需要常量表达式的上下文中使用
                类类型 std::bitset 使用非类型模板参数来定义要存储的位数，因为位数必须是 constexpr 值

                eg:
                    #include <cmath> // for std::sqrt
                    #include <iostream>

                    template <double D> // requires C++20 for floating point non-type parameters
                    double getSqrt()
                    {
                        static_assert(D >= 0.0, "getSqrt(): D must be non-negative");

                        if constexpr (D >= 0) // ignore the constexpr here for this example
                            return std::sqrt(D); // strangely, std::sqrt isn't a constexpr function (until C++26)

                        return 0.0;
                    }

                    int main()
                    {
                        std::cout << getSqrt<5.0>() << '\n';
                        std::cout << getSqrt<-5.0>() << '\n';

                        return 0;
                    }

        非类型模板参数的隐式转换:
            某些非类型模板参数可以隐式转换，以匹配不同类型的非类型模板参数

        使用 auto C++17 对非类型模板参数进行类型推导:
            从 C++17 开始，非类型模板参数可以使用 auto 让编译器从模板实参推导出非类型模板参数:
                eg：    
                    #include <iostream>

                    template <auto N> // deduce non-type template parameter from template argument
                    void print()
                    {
                        std::cout << N << '\n';
                    }

                    int main()
                    {
                        print<5>();   // N deduced as int `5`
                        print<'c'>(); // N deduced as char `c`

                        return 0;
                    }

        



        
