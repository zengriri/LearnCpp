声明和定义
    *声明是一个标识符，而定义就像是实例化一个对象，eg ing a=5; a是一个标识符，他表示一个int类型，值为5的对象。

    *声明满足于编译器，而不满足于连接器。而定义两者皆可。因此：在 C++ 中，所有定义也用作声明。这就是为什么 int x 出现在我们的定义和声明示例中的原因
    
    *lifetime 是一个运行时属性，而 scope 是一个编译时属性


        #include <iostream>
        int add(int x, int y); // forward declaration of add() using function prototype
        int main()
        {
            std::cout << "The sum of 3 and 4 is: " << add(3, 4) << '\n';
            return 0;
        }
        // note: No definition for function add

        分析:1：函数已声明，但却未定义，为什么编译通过?
            answer:虽然前向声明，但从未调用过该函数，则程序将编译并运行良好。  
                    但是，如果进行了前向声明并调用了函数，但程序从未定义函数，则程序可以编译，但链接器会抱怨它无法解析函数调用

    *前向声明：
        函数使用前，请进行先声明,

    *单一定义规则（The one definition rule (ODR)）
        1：在给定的文件中，函数、变量、类型或模板只能有一个定义。
        2：在给定的程序中，变量或普通函数只能有一个定义，做出这种区分是因为程序可以有多个文件。
        3：类型、模板、内联函数和内联变量允许在不同的文件中具有相同的定义。
    
    *未引用的参数:
        在函数定义中，函数参数的名称是可选的。因此，当函数参数需要存在但函数体中没有使用时，可以简单地省略名称,没有名称的参数称为未命名参数or未引用参数
        eg:
        void doSomething(int /*count*/){}



    内联函数:
        有资格扩展其函数调用的函数称为内联函数


        *C++ 编译器有一个技巧可以用来避免这种开销成本：内联扩展是一个函数调用被调用函数定义中的代码替换的过程。
        *内联扩展可以让编译器更有效地优化生成的代码

        缺点:
            如果被扩展的函数的主体比被替换的函数调用需要更多的指令，，那么每次内联扩展都会导致可执行文件变大。较大的可执行文件往往速度较慢（由于不适合缓存）。


        *所以，内联扩展可能会导致性能提高、性能降低或根本不改变性能，这取决于函数调用的相对成本、函数的大小以及可以执行的其他优化


        *现代优化编译器通常非常擅长确定哪些函数应该内联——在大多数情况下比人类更好。结果，编译器可能会忽略或贬低您对内联函数所做的任何请求。

        *内联函数有两个主要要求：
            1：编译器需要能够在使用该函数的每个翻译单元中查看内联函数的完整定义（前向声明本身是不够的）
                如果还提供了前向声明，则定义可以在使用点之后发生。每个翻译单元只能出现一个这样的定义，否则将出现编译错误
            2：内联函数的每个定义必须相同，否则将导致未定义的行为

        *以下是隐式内联的：
            1:在类、结构或联合类型定义中定义的函数
            2:Constexpr / consteval 函数
            3:从函数模板隐式实例化的函数

        *为什么不将所有函数内联并定义在头文件中？
            1:它会增加编译时间。当代码文件中的函数发生更改时，只需要重新编译该代码文件。
                当头文件中的内联函数发生变化时，包含该头文件的每个代码文件(直接或通过另一个头文件)都需要重新编译。在大型项目中，这可能会产生巨大的影响
            2:它可能会导致更多的命名冲突，因为您最终会在单个代码文件中包含更多代码

        最佳实践：
            不要使用 inline 关键字来请求函数的内联扩展。

        note:
            在前面的章节中，我们提到不应在头文件中实现函数（具有外部链接），因为当这些头文件包含在多个 .cpp 文件中时，函数定义将被复制到多个 .cpp 文件中。
                然后这些文件将被编译，链接器将抛出一个错误，因为它会注意到您多次定义了同一个函数，这违反了单一定义规则。

            在现代 C++ 中，术语内联已演变为“允许多个定义”的意思。因此，内联函数是一种允许在多个翻译单元中定义的函数（不违反 ODR）
                链接器会将标识符的所有内联函数定义合并为单个定义（因此仍然满足单一定义规则的要求）
            
            内联函数通常在头文件中定义，可以将它们#included 到任何需要查看标识符的完整定义的代码文件的顶部。这确保了标识符的所有内联定义都是相同的。

            
    Constexpr functions:
        constexpr 函数是可以在编译时计算其返回值的函数。要使函数成为 constexpr 函数，我们只需在返回类型前面使用 constexpr 关键字即可
            当在编译时评估函数调用时，编译器将在编译时计算函数调用的返回值，然后用返回值替换函数调用。

        *Constexpr 函数也可以在运行时评估

        Key insight:
                    *Constexpr 函数允许我们编写可以在编译时评估的函数
                    *允许在编译时或运行时评估具有 constexpr 返回类型的函数，以便单个函数可以服务于这两种情况
                        否则，您需要有单独的函数（一个具有 constexpr 返回类型的函数和一个具有非 constexpr 返回类型的函数）
                        这不仅需要重复的代码，两个函数还需要有不同的名称！
                    *constexpr 函数参数意味着只能使用 constexpr 参数调用该函数。但事实并非如此——当函数在运行时求值时，可以使用非 constexpr 参数来调用 constexpr 函数
                    
        note:
            *constexpr 函数的参数不是隐式 constexpr，也不能声明为 constexpr

        constexpr 函数是隐式内联的
            *由于 constexpr 函数可能在编译时求值，因此编译器必须能够在调用该函数的所有点看到 constexpr 函数的完整定义.即使实际的函数定义稍后出现在同一编译单元中，前向声明也是不够的.
                这意味着在多个文件中调用的 constexpr 函数需要将其定义包含在每个此类文件中——这通常会违反单一定义规则。为了避免此类问题，constexpr 函数是隐式内联的，这使得它们不受单一定义规则的约束
                因此，constexpr 函数通常在头文件中定义，因此可以将它们#included 到任何需要完整定义的 .cpp 文件中

            *note:编译器必须能够看到 constexpr（或 consteval）函数的完整定义，而不仅仅是前向声明。

    匿名函数:
        lambda 表达式（也称为 lambda 或闭包）允许我们在另一个函数中定义一个匿名函数。嵌套很重要，因为它让我们既可以避免命名空间命名污染，又可以将函数定义为尽可能靠近使用它的位置（提供额外的上下文）
             *lambda 的这种用法有时被称为函数字面量。

        语法格式
            [ captureClause ] ( parameters ) -> returnType
            {
                statements;
            }

            注:
               *如果不需要，捕获子句和参数都可以为空。
               *返回类型是可选的，如果省略，将假定为 auto（因此使用类型推断来确定返回类型）。
                    eg：2-1


        类型：
            *就像我们可以用字面值（或函数指针）初始化一个变量以供以后使用一样，我们也可以用 lambda 定义初始化一个 lambda 变量，然后再使用它
                一个命名的 lambda 和一个好的函数名可以使代码更容易阅读。
            eg:
                return std::all_of(array.begin(), array.end(), [](int i){ return ((i % 2) == 0); });
                替换为：
                        auto isEven{
                        [](int i)
                        {
                            return ((i % 2) == 0);
                        }
                        };

                        return std::all_of(array.begin(), array.end(), isEven);

            lambda isEven 的类型是什么？
                *事实证明，lambda 没有我们可以显式使用的类型。当我们编写一个 lambda 时，编译器会为未暴露给我们的 lambda 生成一个唯一类型

                *实际上，lambda 不是函数（这是它们如何避免 C++ 不支持嵌套函数的限制的一部分）

                *它们是一种特殊的对象，称为函子。函子是包含重载 operator() 的对象，使它们像函数一样可调用。


                *虽然我们不知道 lambda 的类型，但有几种存储 lambda 以供后定义使用的方法：
                    1：指针
                    2：function
                    2:auto

                *使用 lambda 的实际类型的唯一方法是通过 auto。与 std::function 相比， auto 还具有没有开销的好处
                *使用 lambda 初始化变量时使用 auto，如果无法使用 lambda 初始化变量，则使用 std::function。

                    eg:2-2

        Generic lambdas:
            *在大多数情况下，lambda 参数的工作规则与常规函数参数相同
            *当 lambda 具有一个或多个 auto 参数时，编译器将从对 lambda 的调用中推断出需要哪些参数类型。
                eg2-3

        Generic lambdas and static variables：
            需要注意的一件事是，将为自动解析到的每种不同类型生成一个唯一的 lambda
                eg:2-4

        
        Lambda 捕获:
            *lambda 只能访问特定类型的标识符：全局标识符、编译时已知的实体以及具有静态存储持续时间的实体。capture 子句用于（间接）让 lambda 访问它通常无法访问的周围范围内可用的变量

            *当执行 lambda 定义时，对于 lambda 捕获的每个变量，都会在 lambda 中创建该变量的克隆（具有相同的名称）。这些克隆的变量此时从同名的外部范围变量初始化。
                注：
                    捕获的 lambda 变量是外部范围变量的克隆，而不是实际变量。
                    *当编译器遇到 lambda 定义时，它会为 lambda 创建一个自定义对象定义。每个捕获的变量都成为对象的数据成员。
                    *在运行时，当遇到 lambda 定义时，将实例化 lambda 对象，并在该点初始化 lambda 的成员

                eg：2-5


            *捕获默认为 const 值
                这意味着当创建 lambda 时，lambda 会捕获外部范围变量的常量副本，这意味着不允许 lambda 修改它们

            Mutable capture by value：
                *为了允许修改通过值捕获的变量，我们可以将 lambda 标记为可变。在此上下文中的 mutable 关键字删除了 const

                *请注意，ammo 的值会在对 lambda 的调用中保留！

                eg:2-6


        Capture by reference
            *要通过引用捕获变量，我们在捕获中的变量名称前添加一个和号 (&)
            *与按值捕获的变量不同，按引用捕获的变量是非常量的，除非它们捕获的变量是 const
            *每当您通常希望通过引用将参数传递给函数时，按引用捕获应该优先于按值捕获

            eg：2-7
        

        Default captures：
            默认捕获（也称为默认捕获）捕获 lambda 中提到的所有变量。如果使用默认捕获，则不会捕获 lambda 中未提及的变量

                *要按值捕获所有使用的变量，请使用捕获值 =。
                *要通过引用捕获所有使用的变量，请使用 & 的捕获值。

                    eg:
                        int health{ 33 };
                        int armor{ 100 };
                        std::vector<CEnemy> enemies{};

                        // Capture health and armor by value, and enemies by reference.
                        [health, armor, &enemies](){};

                        // Capture enemies by reference and everything else by value.
                        [=, &enemies](){};

                        // Capture armor by value and everything else by reference.
                        [&, armor](){};

                        // Illegal, we already said we want to capture everything by reference.
                        [&, &armor](){};

                        // Illegal, we already said we want to capture everything by value.
                        [=, armor](){};

                        // Illegal, armor appears twice.
                        [armor, &health, &armor](){};

                        // Illegal, the default capture has to be the first element in the capture group.
                        [armor, &](){};

        注：
            通过引用捕获变量时要格外小心，尤其是使用默认引用捕获。捕获的变量必须比 lambda 寿命更长
    
        可变 lambda 的意外副本:

            eg：
                #include <iostream>
                int main()
                {
                int i{ 0 };

                // Create a new lambda named count
                auto count{ [i]() mutable {
                    std::cout << ++i << '\n';
                } };

                count(); // invoke count

                auto otherCount{ count }; // create a copy of count

                // invoke both count and the copy
                count();
                otherCount();

                return 0;
                }

                    Output
                    1
                    2
                    2

                代码不是打印 1、2、3，而是两次打印 2
                .当我们创建 otherCount 作为 count 的副本时，我们创建了当前状态的 count 副本。 count 的 i 是 1，所以 otherCount 的 i 也是 1。由于 otherCount 是 count 的副本，因此它们每个都有自己的 i

            *幸运的是，C++ 提供了一种方便的类型（作为 <functional> 标头的一部分），称为 std::reference_wrapper，它允许我们像传递引用一样传递普通类型。
                eg:
                    #include <iostream>
                    #include <functional>

                    void invoke(const std::function<void()>& fn)
                    {
                        fn();
                    }

                    int main()
                    {
                        int i{ 0 };

                        // Increments and prints its local copy of @i.
                        auto count{ [i]() mutable {
                        std::cout << ++i << '\n';
                        } };

                        // std::ref(count) ensures count is treated like a reference
                        // thus, anything that tries to copy count will actually copy the reference
                        // ensuring that only one count exists
                        invoke(std::ref(count));
                        invoke(std::ref(count));
                        invoke(std::ref(count));

                        return 0;
                    }


        Defining new variables in the lambda-capture:  
            有时我们想要捕获一个稍作修改的变量，或者声明一个仅在 lambda 范围内可见的新变量。我们可以通过在 lambda-capture 中定义一个变量而不指定它的类型来做到这一点
                eg:2-8

        Unintended copies of mutable lambdas:
            因为 lambdas 是对象，所以它们可以被复制。在某些情况下，这可能会导致问题
                eg：2-9，2-10，2-11


        

       


        