翻译和预处理器:
    在编译之前，代码文件会经过一个称为翻译的阶段.在翻译阶段会发生很多事情来让你的代码准备好被编译,应用了翻译的代码文件称为翻译单元。翻译单元是发送到编译器进行编译的内容。
    翻译阶段涉及预处理器。最好将预处理器视为一个单独的程序，用于处理每个代码文件中的文本

    *当预处理器运行时，它会扫描代码文件（从上到下），寻找预处理器指令.
    *预处理器指令（通常称为指令）是以 # 符号开头并以换行符（不是分号）结尾的指令
    *这些指令告诉预处理器执行特定的特定文本操作任务。请注意，预处理器不理解 C++ 语法,相反，这些指令有自己的语法
    *预处理器的输出经过几个翻译阶段，然后被编译。
    *请注意，预处理器不会以任何方式修改原始代码文件——相反，每次编译代码文件时，预处理器所做的所有更改都临时发生在内存中或使用临时文件。



常见的预处理器指令:

    Includes:
        替换作用
        eg: #include <iostream>) 直接在该位置替换成iostream文件种的全部内容

    Macro defines：（2种宏:对象宏和函数宏）
        #define 指令可用于创建宏。在 C++ 中，宏是定义如何将输入文本转换为替换输出文本的规则
        eg: #define identifier(不带文本替换的对象宏)
            #define identifier substitution_text（带文本替换的对象宏）

    Object-like macros with substitution text:
        当预处理器遇到这个指令时，标识符的任何进一步出现都被替换文本替换。标识符传统上以全部大写字母键入，使用下划线表示空格
        eg：#define MY_NAME "Alex"

    Conditional compilation：
        eg： #ifdef ，#endif等

    #if 0：
        条件编译的一个更常见的用法是使用 #if 0 来排除编译代码块


定义的范围：
    一旦预处理器完成，该文件中所有定义的标识符都将被丢弃。这意味着指令仅从定义点到定义它们的文件末尾有效。在一个代码文件中定义的指令不会影响同一项目中的其他代码文件




    