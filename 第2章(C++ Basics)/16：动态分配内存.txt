*概述:
    动态内存分配是运行程序在需要时向操作系统请求内存的一种方式。该内存并非来自程序有限的堆栈内存,
        相反，它是从操作系统管理的一个更大的内存池（称为堆）中分配的。在现代机器上，堆的大小可以达到千兆字节。

    动态分配数组的长度具有 std::size_t 类型。如果您使用非 constexpr int，则需要将 static_cast 转换为 std::size_t，因为这被视为缩小转换，否则编译器会发出警告。
        eg:17.1
            因为我们正在分配一个数组，所以 C++ 知道它应该使用 new 的数组版本而不是 new 的标量版本。本质上，即使 [] 没有放置在 new 关键字旁边，也会调用 new[] 运算符。


*内存泄漏：
    动态分配的内存将保持分配状态，直到显式释放或程序结束（并且操作系统会清理它，假设您的操作系统会这样做）。
        但是，用于保存动态分配的内存地址的指针遵循局部变量的正常作用域规则。这种不匹配会产生有趣的问题。
        这称为内存泄漏。当您的程序在将动态分配的内存的某些位返回给操作系统之前丢失其地址时，就会发生内存泄漏。
        发生这种情况时，您的程序无法删除动态分配的内存，因为它不再知道它在哪里。操作系统也无法使用该内存，因为该内存被认为仍在被您的程序使用。

*动态数组:
    *动态删除数组
        当删除动态分配的数组时，我们必须使用数组版本的delete，即delete[]。
            这告诉 CPU 它需要清理多个变量而不是单个变量。
            关于数组delete[]的一个经常被问到的问题是，“数组删除如何知道要删除多少内存？”答案是数组 new[] 跟踪分配给变量的内存量，以便数组 delete[] 可以删除适当的内存量。
            不幸的是，程序员无法访问这个大小/长度
            
    *动态数组与固定数组几乎相同：
        动态数组的生命周期始于指向数组第一个元素的指针。因此，它具有相同的局限性，因为它不知道自己的长度或大小。
            动态数组的功能与衰减的固定数组相同，不同之处在于程序员负责通过delete[]关键字释放动态数组。

    *初始化动态分配的数组
        eg:
            int* array{ new int[length]{} };
            int* array{ new int[5]{ 9, 7, 5, 3, 1 } }; // initialize a dynamic array since C++11

    *调整数组大小:
        动态分配数组允许您在分配时设置数组长度。但是，C++ 不提供内置方法来调整已分配数组的大小。
            可以通过动态分配新数组、复制元素并删除旧数组来解决此限制


*指向指针的指针和动态多维数组:
    *一个保存另一个指针地址的指针。
        指向 int 指针的指针使用两个星号声明
            eg: int** ptr;

    *指向指针的指针的工作方式与普通指针一样 - 您可以取消引用它以检索指向的值。由于该值本身就是一个指针，因此您可以再次取消引用它以获取基础值。这些取消引用可以连续完成
        eg:
            int value { 5 };
            int* ptr { &value };
            std::cout << *ptr << '\n'; // Dereference pointer to int to get int value

            int** ptrptr { &ptr };
            std::cout << **ptrptr << '\n'; // dereference to get pointer to int, dereference again to get int value      

        note:
             请注意，您不能将指针设置为直接指向值的指针：     
                eg:
                    int value { 5 };
                    int** ptrptr { &&value }; // not valid

                这是因为运算符（operator&）的地址需要左值，但&value是右值。
                    但是，指向指针的指针可以设置为 null：
                        eg:
                            int** ptrptr { nullptr };

    *指针数组:
        指向指针的指针有一些用途。最常见的用途是动态分配指针数组,
            这就像标准的动态分配数组一样工作，只不过数组元素的类型是“指向整数的指针”而不是整数。
            eg:
                int** array { new int*[10] }; // allocate an array of 10 int pointers

        *二维动态分配数组
            指向指针的指针的另一个常见用途是促进动态分配的多维数组
                eg:
                    int** array { new int[10][5] }; // won’t work!

            1:首先，我们分配一个指针数组（如上所述）。
            2:然后我们迭代指针数组并为每个数组元素分配一个动态数组。我们的动态二维数组是动态一维数组的动态一维数组！
                eg:
                    int** array { new int*[10] }; // allocate an array of 10 int pointers — these are our rows
                    for (int count { 0 }; count < 10; ++count)
                        array[count] = new int[5]; // these are our columns

                    使用此方法释放动态分配的二维数组也需要一个循环：
                        for (int count { 0 }; count < 10; ++count)
                            delete[] array[count];
                        delete[] array; // this needs to be done last



*结论:
    1：运算符 new 和 delete 允许我们为程序动态分配单个变量。    
    2：动态分配的内存具有动态持续时间，并且将保持分配状态，直到您取消分配它或程序终止。
    3：请小心，不要对悬空指针或空指针执行取消引用。

*Best practice:
    *删除空指针是可以的，并且没有任何作用。无需条件化您的删除语句。