定义：
    在 C++ 中，运算符被实现为函数。通过在操作符函数上使用函数重载，您可以定义自己的操作符版本来处理不同的数据类型（包括您编写的类）。使用函数重载来重载运算符称为运算符重载。


解决重载运算符：
    在评估包含运算符的表达式时，编译器使用以下规则：
        *如果所有操作数都是基本数据类型，编译器将调用一个内置例程（如果存在）。如果不存在，编译器将产生编译器错误。
        *如果任何操作数是用户数据类型（例如，您的某个类或枚举类型），编译器会查看该类型是否具有可以调用的匹配重载运算符函数
            如果找不到，它将尝试将一个或多个用户定义的类型操作数转换为基本数据类型，以便它可以使用匹配的内置运算符（通过重载类型转换，我们将在后面介绍本章）。如果失败，则会产生编译错误。


重载操作符限制：
    *首先，几乎所有现有的 C++ 运算符都可以重载。例外情况是：条件 (?:)、sizeof、范围 (::)、成员选择器 (.)、成员指针选择器 (.*)、typeid 和强制转换运算符。
    *其次，您只能重载存在的运算符。您不能创建新的运算符或重命名现有的运算符。例如，您不能创建运算符 ** 来计算指数。
    *第三，重载运算符中的至少一个操作数必须是用户定义的类型。
        这意味着您不能重载加号运算符来处理一个整数和一个双精度数。但是，您可以重载加号运算符以使用整数和 Mystring。

    *最后，所有运算符都保留其默认优先级和关联性（无论它们用于什么），并且无法更改。使用友元函数重载算术运算符

事实证明，有三种不同的方式来重载运算符：
    *友元函数方式   eg: 1-1,1-2,1-3
    *普通函数方式   eg: 1-4
    *成员函数方式   eg: 1-5
        使用成员函数重载运算符与使用友元函数重载运算符非常相似。使用成员函数重载运算符时：
            *重载的运算符必须作为左操作数的成员函数添加。
            *左操作数成为隐含的​​ *this 对象
            *所有其他操作数都成为函数参数。

            将友元重载运算符转换为成员重载运算符很容易：
                1:重载运算符被定义为成员而不是友元（Cents::operator+ 而不是朋友运算符+）
                2：左边的参数被移除了，因为那个参数现在变成了隐含的 *this 对象
                3：在函数体内部，可以删除对左参数的所有引用
 
        不是所有的东西都可以作为友元函数重载:
            赋值 (=)、下标 ([])、函数调用 (()) 和成员选择 (->) 运算符必须作为成员函数重载，因为语言要求它们如此。


        并非所有东西都可以作为成员函数重载:
            eg：
                我们不能将 operator<< 重载为成员函数
                    为什么不？因为重载的运算符必须作为左操作数的成员添加。在这种情况下，左操作数是 std::ostream 类型的对象。 std::ostream 被固定为标准库的一部分
                    我们不能修改类声明以将重载添加为 std::ostream 的成员函数。这需要将 operator<< 作为普通函数（首选）或友元重载。

                同样，虽然我们可以将 operator+(Cents, int) 重载为成员函数（就像我们上面所做的那样），但我们不能将 operator+(int, Cents) 重载为成员函数，因为 int 不是我们可以添加成员的类到。



何时使用普通、友元或成员函数重载:
    以下经验法则可以帮助您确定哪种形式最适合给定情况:
        *如果要重载赋值 (=)、下标 ([])、函数调用 (()) 或成员选择 (->)，请将其作为成员函数。
        *如果要重载一元运算符，请将其作为成员函数进行。
        *如果您要重载不修改其左操作数的二元运算符（例如 operator+），请将其作为普通函数（首选）或友元函数。
        *如果您正在重载修改其左操作数的二元运算符，但您不能将成员添加到左操作数的类定义中（例如 operator<<，它有一个 ostream 类型的左操作数），将其作为普通函数（首选）或友元函数。
        *如果您重载了修改其左操作数的二元运算符（例如 operator+=），并且您可以修改左操作数的定义，请将其作为成员函数进行。




   