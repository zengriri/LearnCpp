对象：
    我们在 C++ 中将对象定义为“一块可用于存储值的内存”。具有名称的对象称为变量。

重新审视结构与类：
    *类默认它的成员是私有的。结构默认其成员为公共。
    *结构从其他类公开继承，类私下继承
    
默认构造函数和默认初始化：
    不带参数（或所有参数都具有默认值）的构造函数称为默认构造函数。如果未提供用户提供的初始化值，则调用默认构造函数。
        *优先使用列表初始化而不是类对象的默认初始化。
            eg:
                Fraction frac {}; // Value initialization using empty set of braces
                Fraction frac; // Default-initialization, calls default constructor

    使用带参数的构造函数直接初始化和列表初始化:
        *支持大括号初始化以初始化类对象。
            eg：
                Fraction fiveThirds{ 5, 3 }; // List initialization, calls Fraction(int, int)
                Fraction threeQuarters(3, 4); // Direct initialization, also calls Fraction(int, int)

    隐式生成的默认构造函数：
        *如果你的类没有构造函数，C++ 会自动为你生成一个公共的默认构造函数。这有时称为隐式构造函数（或隐式生成的构造函数）
        *如果您的类有任何其他构造函数，则不会提供隐式生成的构造函数。
        *如果您的类中有构造函数并且需要一个什么都不做的默认构造函数（例如，因为您的所有成员都使用非静态成员初始化进行了初始化），请使用 = default。
            使用 = default 比编写一个空主体的构造函数要长，但更好地表达了你的意图（创建默认构造函数），而且更安全，因为它可以对成员进行零初始化，即使它们在声明时没有被初始化
            eg:
                class Date
                {
                private:
                    int m_year{ 1900 };
                    int m_month{ 1 };
                    int m_day{ 1 };

                public:
                    // Tell the compiler to create a default constructor, even if
                    // there are other user-provided constructors.
                    Date() = default;

                    Date(int year, int month, int day) // normal non-default constructor
                    {
                        m_year = year;
                        m_month = month;
                        m_day = day;
                    }
                };

    
    成员初始化器列表:
        在构造函数参数之后插入成员初始化器列表.它以冒号 (:) 开头，然后列出要初始化的每个变量以及该变量的值，并用逗号分隔。
            *请注意，我们不再需要在构造函数主体中进行赋值，因为初始化列表替换了该功能
                eg:
                    #include <iostream>
                    class Something
                    {
                    private:
                        int m_value1 {};
                        double m_value2 {};
                        char m_value3 {};

                    public:
                        Something(int value1, double value2, char value3='c')
                            : m_value1{ value1 }, m_value2{ value2 }, m_value3{ value3 } // directly initialize our member variables
                        {
                        // No need for assignment here
                        }

                        void print()
                        {
                            std::cout << "Something(" << m_value1 << ", " << m_value2 << ", " << m_value3 << ")\n";
                        }

                    };

                    int main()
                    {
                        Something something{ 1, 2.2 }; // value1 = 1, value2=2.2, value3 gets default value 'c'
                        something.print();
                        return 0;
                    }


析构函数:
    *析构函数是另一种特殊的类成员函数，当该类的对象被销毁时执行。构造函数旨在初始化一个类，而析构函数旨在帮助清理。
    *当对象正常超出范围，或使用 delete 关键字显式删除动态分配的对象时，在从内存中删除对象之前，会自动调用类析构函数（如果存在）进行任何必要的清理。
    *一个类只能有一个析构函数。

    析构函数命名：
        *析构函数必须与类同名，前面加波浪号 (~)。
        *析构函数不能接受参数。
        *析构函数没有返回类型。

    


