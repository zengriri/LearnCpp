预处理器:对代码文件的文本进行各种更改。预处理器所做的大部分工作都相当无趣。例如，它去除注释，并确保每个代码文件以换行符结尾。
            然而，预处理器确实有一个非常重要的作用：它处理#include

        当预处理器运行时，它会扫描代码文件（从上到下），寻找预处理器指令，预处理程序指令（通常简称为指令）是以# 符号开头并以换行符（不是分号）结尾的指令，这些指令告诉预处理器执行某些文本操作任务。

        

编译器：为了编译 C++ 程序，我们使用 C++ 编译器。 C++ 编译器按顺序遍历程序中的每个源代码 (.cpp) 文件并执行两项重要任务：

        首先：它会检查您的代码以确保它遵循 C++ 语言的规则，如果没有，编译器会给你一个错误（和相应的行号）来帮助确定需要修复的地方。编译过程也将中止，直到错误得到修复
        
        然后：它将您的 C++ 源代码翻译成称为 目标文件 的机器语言文件。对象文件通常命名为 name.o 或 name.obj，其中 name 与生成它的 .cpp 文件的名称相同。
              每个cpp文件相对应一个obj。即有多个cpp就有多少个obj。



连接器：在编译器创建一个或多个目标文件之后，即上面的obj or o文件，另一个名为链接器的程序就会启动。链接器的工作包括三个方面

    首先：获取编译器生成的所有目标文件，并将它们组合成一个可执行程序。
    
    其次：除了能够链接目标文件之外，链接器还能够链接库文件。库文件是已“打包”以在其他程序中重用的预编译代码的集合。

    最后：链接器确保正确解析所有跨文件依赖项   
        eg:如果您在一个 .cpp 文件中定义某些内容，然后在另一个 .cpp 文件中使用它，则链接器会将两者连接在一起.如果链接器无法使用其定义连接对某事物的引用，则会出现链接器错误，并且链接过程将中止



note：
    *请注意，预处理器不理解 C++ 语法——相反，指令有自己的语法（在某些情况下类似于 C++ 语法，而在其他情况下，则不太相似）。
    *预处理器实际上不会以任何方式修改原始代码文件——相反，预处理器所做的所有更改都临时发生在内存中或使用临时文件。
    *编译器会单独编译每个文件。它不知道其他代码文件的内容，也不记得它从以前编译的代码文件中看到的任何内容

    